/**
 ******************************************************************************
 * @file       kmlexport.cpp
 * @author     Tau Labs, http://taulabs.org, Copyright (C) 2013.
 * @addtogroup GCSPlugins GCS Plugins
 * @{
 * @brief Exports log data to KML
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#include <QDebug>
#include <QMessageBox>
#include <QTextStream>
#include <QtGlobal>

#include <coreplugin/coreconstants.h>
#include "utils/coordinateconversions.h"
#include "uavobjects/uavobjectsinit.h"
#include "uavobjectmanager.h"

// autogenerated version info string. MUST GO BEFORE coreconstants.h INCLUDE
#include "../../../../../build/ground/gcs/gcsversioninfo.h"

#include "kmlexport.h"


const double ColorMap_Jet[256][3] = COLORMAP_JET;
#define maxVelocity 20 // This shouldn't be hardcoded

KmlExport::KmlExport(QString inputLogFileName, QString outputKmlFileName) :
    outputFileName(outputKmlFileName)
{
    logFile.setFileName(inputLogFileName);

    // Create new UAVObject manager and initialize it with all UAVObjects
    UAVObjectManager *kmlUAVObjectManager = new UAVObjectManager;
    UAVObjectsInitialize(kmlUAVObjectManager);

    // Connect new UAVO manager to a UAVTalk instance
    kmlTalk = new UAVTalk(&logFile, kmlUAVObjectManager);

    // Get the UAVObjects
    homeLocation = HomeLocation::GetInstance(kmlUAVObjectManager);
    positionActual = PositionActual::GetInstance(kmlUAVObjectManager);
    velocityActual = VelocityActual::GetInstance(kmlUAVObjectManager);

    homeLocationData = homeLocation->getData();

    // Connect position actual. This is the trigger event for plotting a new
    // KML placemark.
    connect(positionActual, SIGNAL(objectUpdated(UAVObject *)), this, SLOT(uavobjectUpdated(UAVObject *)), Qt::DirectConnection);
    connect(homeLocation, SIGNAL(objectUpdated(UAVObject *)), this, SLOT(homeLocationUpdated(UAVObject *)), Qt::DirectConnection);

    // Get the factory singleton to create KML elements.
    factory = KmlFactory::GetFactory();

    // Create <Document>
    document = factory->CreateDocument();

    // Create custom balloon style. Add as document's first element
    StylePtr style = createCustomBalloonStyle();
    document->add_styleselector(style);
}


/**
 * @brief KmlExport::exportToKML Triggers logfile export to KML.
 */
void KmlExport::exportToKML()
{
    bool ret = open();
    if (!ret) {
        qDebug () << "Logfile failed to open during KML export";
        return;
    }

    // Parses logfile and generates KML document
    ret = preparseLogFile();
    if (!ret) {
        qDebug () << "Logfile preparsing failed";
        return;
    }

    // Call parser
    parseLogFile();

    // Create <kml> and give it <Document>.
    KmlPtr kml = factory->CreateKml();
    kml->set_feature(document);  // kml takes ownership.

    // Serialize to XML
    std::string kml_data = kmldom::SerializePretty(kml);

    // Save to file
    if ((outputFileName == NULL) || !kmlbase::File::WriteStringToFile(kml_data, outputFileName.toStdString())) {
        qDebug() << "KML write failed: " << outputFileName;
        QMessageBox::critical(new QWidget(),"KML write failed", "Failed to write KML file.");
    }
}


/**
 * @brief KmlExport::open Opens the logfile and ensures it's sane
 * @return
 */
bool KmlExport::open()
{
    if (logFile.isOpen()) {
        logFile.close();
    }

    //Open log file as  ReadOnly
    if(logFile.open(QIODevice::ReadOnly) == FALSE)
    {
        qDebug() << "Unable to open " << logFile.fileName() << " for logging";
        return false;
    }

    logFile.readLine(); //Read first line of log file. This assumes that the logfile is of the new format.
    QString logGitHashString=logFile.readLine().trimmed(); //Read second line of log file. This assumes that the logfile is of the new format.
    QString logUAVOHashString=logFile.readLine().trimmed(); //Read third line of log file. This assumes that the logfile is of the new format.
    QString gitHash = QString::fromLatin1(Core::Constants::GCS_REVISION_STR);
    QString uavoHash = QString::fromLatin1(Core::Constants::UAVOSHA1_STR).replace("\"{ ", "").replace(" }\"", "").replace(",", "").replace("0x", ""); // See comment above for necessity for string replacements

    if(logUAVOHashString != uavoHash){
        QMessageBox msgBox;
        msgBox.setText("Likely log file incompatibility.");
        msgBox.setInformativeText(QString("The log file was made with branch %1, UAVO hash %2. GCS will attempt to export the file.").arg(logGitHashString).arg(logUAVOHashString));
        msgBox.exec();
    }
    else if(logGitHashString != gitHash){
        QMessageBox msgBox;
        msgBox.setText("Possible log file incompatibility.");
        msgBox.setInformativeText(QString("The log file was made with branch %1. GCS will attempt to export the file.").arg(logGitHashString));
        msgBox.exec();
    }

    QString tmpLine=logFile.readLine(); //Look for the header/body separation string.
    int cnt=0;
    while (tmpLine!="##\n" && cnt < 10 && !logFile.atEnd()){
        tmpLine=logFile.readLine().trimmed();
        cnt++;
    }

    //Check if we reached the end of the file before finding the separation string
    if (cnt >=10 || logFile.atEnd()){
        QMessageBox msgBox;
        msgBox.setText("Corrupted file.");
        msgBox.setInformativeText("GCS cannot find the separation byte. GCS will attempt to export the file."); //<--TODO: add hyperlink to webpage with better description.
        msgBox.exec();

        //Since we could not find the file separator, we need to return to the beginning of the file
        logFile.seek(0);
    }

    return true;
}


/**
 * @brief KmlExport::preparseLogFile Ensures that the logfile has data to export
 * @return
 */
bool KmlExport::preparseLogFile()
{
    //Read all log timestamps into array
    timestampBuffer.clear(); //Save beginning of log for later use
    timestampPos.clear();
    quint64 logFileStartIdx = logFile.pos();
    quint32 lastTimeStamp = 0;

    while (!logFile.atEnd()){
        qint64 dataSize;

        //Get time stamp position
        timestampPos.append(logFile.pos());

        //Read timestamp and logfile packet size
        logFile.read((char *) &lastTimeStamp, sizeof(lastTimeStamp));
        logFile.read((char *) &dataSize, sizeof(dataSize));

        //Check if dataSize sync bytes are correct.
        //TODO: LIKELY AS NOT, THIS WILL FAIL TO RESYNC BECAUSE THERE IS TOO LITTLE INFORMATION IN THE STRING OF SIX 0x00
        if ((dataSize & 0xFFFFFFFFFFFF0000)!=0){
            qDebug() << "Wrong sync byte. At file location 0x"  << QString("%1").arg(logFile.pos(),0,16) << "Got 0x" << QString("%1").arg(dataSize & 0xFFFFFFFFFFFF0000,0,16) << ", but expected 0x""00"".";
            logFile.seek(timestampPos.last()+1);
            timestampPos.pop_back();
            continue;
        }

        //Check if timestamps are sequential.
        if (!timestampBuffer.isEmpty() && lastTimeStamp < timestampBuffer.last()){
            QMessageBox msgBox;
            msgBox.setText("Corrupted file.");
            msgBox.setInformativeText("Timestamps are not sequential. Playback may have unexpected behavior"); //<--TODO: add hyperlink to webpage with better description.
            msgBox.exec();

            qDebug() << "Timestamp: " << timestampBuffer.last() << " " << lastTimeStamp;
        }

        timestampBuffer.append(lastTimeStamp);

        logFile.seek(timestampPos.last()+sizeof(lastTimeStamp)+sizeof(dataSize)+dataSize);
    }

    //Check if any timestamps were successfully read
    if (timestampBuffer.size() == 0){
        QMessageBox msgBox;
        msgBox.setText("Empty logfile.");
        msgBox.setInformativeText("No log data can be found.");
        msgBox.exec();

        stopExport();
        return false;
    }

    //Reset to log beginning, including the timestamp.
    logFile.seek(logFileStartIdx);

    return true;
}


/**
 * @brief KmlExport::stopExport Called to stop the export. Currently only closes
 * the logfile
 * @return
 */
bool KmlExport::stopExport()
{
    logFile.close();
    return true;
}


/**
 * @brief KmlExport::parseLogFile Parses logfile and exports results to KML file
 */
void KmlExport::parseLogFile()
{
    qint64 packetSize;
    quint32 timeStampIdx;

    //Read packets
    while (!logFile.atEnd())
    {
        if(logFile.bytesAvailable() < 4) {
            break;
        }

        //Read timestamp and logfile packet size
        logFile.read((char *) &timeStamp, sizeof(timeStamp));
        logFile.read((char *) &packetSize, sizeof(packetSize));

        if (packetSize<1 || packetSize>(1024*1024)) {
            qDebug() << "Error: Logfile corrupted! Unlikely packet size: " << packetSize << "\n";
            QMessageBox::critical(new QWidget(),"Corrupted file", "Incorrect packet size. Stopping export. Data up to this point will be saved.");

            break;
        }

        if(logFile.bytesAvailable() < packetSize) {
            break;
        }

        // Read the data packet from the file.
        QByteArray dataBuffer;
        dataBuffer.append(logFile.read(packetSize));

        // Parse the packet. This operation passes the data to the kmlTalk object, which internally parses the data
        // and then emits objectUpdated(UAVObject *) signals. These signals are connected to in the KmlExport constructor.
        for (int i=0; i < dataBuffer.size(); i++) {
            kmlTalk->processInputByte(dataBuffer[i]);
        }

        timeStampIdx++;
    }

    stopExport();
}


StylePtr KmlExport::createCustomBalloonStyle()
{
    // Add custom balloon style (gets rid of "Directions to here...")
    // https://groups.google.com/forum/?fromgroups#!topic/kml-support-getting-started/2CqF9oiynRY
    BalloonStylePtr balloonStyle = factory->CreateBalloonStyle();
    balloonStyle->set_text("$[description]");

    // Change the icon
    IconStyleIconPtr iconStyleIcon = factory->CreateIconStyleIcon();
    iconStyleIcon->set_href("http://earth.google.com/images/kml-icons/track-directional/track-none.png");

    // Create an icon style
    IconStylePtr iconStyle = factory->CreateIconStyle();
    iconStyle->set_color(kmlbase::Color32(255, 255, 255, 255));
    iconStyle->set_icon(iconStyleIcon);

    // Link the style to the icon
    StylePtr style = factory->CreateStyle();
    style->set_id("directionlessBallonStyle");
    style->set_balloonstyle(balloonStyle);
    style->set_iconstyle(iconStyle);

    return style;
}


/**
 * @brief KmlExport::CreateLineStringPlacemark Adds a line segment which is colored according to the
 * vehicle's speed.
 * @param startPoint Beginning point along line
 * @param endPoint End point point along line
 * @return
 */
PlacemarkPtr KmlExport::CreateLineStringPlacemark(const LLAVCoordinates &startPoint, const LLAVCoordinates &endPoint)
{
    CoordinatesPtr coordinates = factory->CreateCoordinates();
    coordinates->add_latlngalt(startPoint.latitude, startPoint.longitude, startPoint.altitude);
    coordinates->add_latlngalt(endPoint.latitude,   endPoint.longitude,   endPoint.altitude);

    LineStringPtr linestring = factory->CreateLineString();
    linestring->set_extrude(false); // Do not extrude to ground
    linestring->set_altitudemode(kmldom::ALTITUDEMODE_ABSOLUTE);
    linestring->set_coordinates(coordinates);

    LineStylePtr linestyle = factory->CreateLineStyle();
    double currentVelocity = (startPoint.velocity + endPoint.velocity)/2;
    uint8_t colorMapIdx = currentVelocity/maxVelocity * 255;
    uint8_t a = 255;
    uint8_t r = round(ColorMap_Jet[colorMapIdx][0]*255); // Colormap is in [0,1], so it needs to be scaled to [0,255]
    uint8_t g = round(ColorMap_Jet[colorMapIdx][1]*255);
    uint8_t b = round(ColorMap_Jet[colorMapIdx][2]*255);
    linestyle->set_color(kmlbase::Color32(a, b, g, r));

    StylePtr style = factory->CreateStyle();
    style->set_linestyle(linestyle);

    PlacemarkPtr placemark = factory->CreatePlacemark();
    placemark->set_geometry(linestring);
    placemark->set_name("tl_plot");
    placemark->set_style(style);
    placemark->set_visibility(true);

    return placemark;
}


/**
 * @brief KmlExport::createTimespanPlacemark Creates a timestamp placemark, which allows the
 * trajectory to be played forward in time. The placemark also contains pertinent data about
 * the vehicle's state at that timespan
 * @param timestampPoint
 * @param lastPlacemarkTime
 * @param newPlacemarkTime
 * @return
 */
PlacemarkPtr KmlExport::createTimespanPlacemark(const LLAVCoordinates &timestampPoint, quint32 lastPlacemarkTime, quint32 newPlacemarkTime)
{
    // Create coordinates
    CoordinatesPtr coordinates = factory->CreateCoordinates();
    coordinates->add_latlngalt(timestampPoint.latitude, timestampPoint.longitude, timestampPoint.altitude);

    // Create point, using previous coordinates
    PointPtr point = factory->CreatePoint();
    point->set_extrude(true); // Extrude to ground
    point->set_altitudemode(kmldom::ALTITUDEMODE_ABSOLUTE);
    point->set_coordinates(coordinates);

    // Create the timespan
    TimeSpanPtr timeSpan = factory->CreateTimeSpan();
    QDateTime startTime = QDateTime::currentDateTimeUtc().addMSecs(lastPlacemarkTime); // FIXME: Make it a function of the realtime preferably gotten from the GPS
    QDateTime endTime = QDateTime::currentDateTimeUtc().addMSecs(newPlacemarkTime);
    QString dateTimeFormat("yyyy-MM-ddThh:mm:ssZ"); // XML Schema time format
    timeSpan->set_begin(startTime.toString(dateTimeFormat).toStdString());
    timeSpan->set_end(endTime.toString(dateTimeFormat).toStdString());

    // Generate the placemark with all above attributes
    PlacemarkPtr placemark = factory->CreatePlacemark();
    placemark->set_geometry(point);
    placemark->set_timeprimitive(timeSpan);
    placemark->set_name(QString("%1").arg(timeStamp / 1000.0).toStdString());
    placemark->set_visibility(true);

    // Set the placemark to use the custom balloon style
    placemark->set_styleurl("#directionlessBallonStyle");

    // Add a nice description to the placemark
    placemark->set_description(QString("Latitude: %1 deg\nLongitude: %2 deg\nAltitude: %3 m\nAirspeed: %4 m/s\nGroundspeed: %5 m/s\n").arg(timestampPoint.latitude).arg(timestampPoint.longitude).arg(timestampPoint.altitude).arg(-1).arg(timestampPoint.velocity).toStdString());

    return placemark;
}


/**
 * @brief KmlExport::uavobjectUpdated Triggers on PositionActual UAVO
 * update. Converts position to latitude-longitude-altitude and then
 * creates new placemarks.
 * @param obj Unused
 */
void KmlExport::uavobjectUpdated(UAVObject *obj)
{
    Q_UNUSED(obj);

    // Only export positional data if the home location has been set.
    if (homeLocationData.Set == HomeLocation::SET_FALSE)
        return;

    PositionActual::DataFields positionActualData = positionActual->getData();
    VelocityActual::DataFields velocityActualData = velocityActual->getData();

    LLAVCoordinates newPoint;

    // Convert NED data to LLA data
    double homeLLA[3]={homeLocationData.Latitude/1e7, homeLocationData.Longitude/1e7, homeLocationData.Altitude};
    double NED[3]={positionActualData.North, positionActualData.East, positionActualData.Down};
    double LLA[3];
    Utils::CoordinateConversions().NED2LLA_HomeLLA(homeLLA, NED, LLA);

    // Generate new placemark
    newPoint.latitude = LLA[0];
    newPoint.longitude = LLA[1];
    newPoint.altitude = LLA[2];
    newPoint.velocity = sqrt(velocityActualData.North*velocityActualData.North + velocityActualData.East*velocityActualData.East);

    PlacemarkPtr newPlacemark = CreateLineStringPlacemark(oldPoint, newPoint);

    // Add the placemark to the KML document
    document->add_feature(newPlacemark);

    // Every 2 seconds generate a time stamp
    if (timeStamp - lastPlacemarkTime > 2000) {

        PlacemarkPtr newPlacemarkTimestamp = createTimespanPlacemark(newPoint, lastPlacemarkTime, timeStamp);
        document->add_feature(newPlacemarkTimestamp);
        lastPlacemarkTime = timeStamp;
    }

    // Copy newPoint to oldPoint
    oldPoint.latitude = newPoint.latitude;
    oldPoint.longitude = newPoint.longitude;
    oldPoint.altitude = newPoint.altitude;
    oldPoint.velocity = newPoint.velocity;

}

void KmlExport::homeLocationUpdated(UAVObject *obj)
{
    Q_UNUSED(obj);
    homeLocationData = homeLocation->getData();
}
