#include "logfile.h"
#include <QDebug>
#include <QtGlobal>
#include <QTextStream>
 #include <QMessageBox>

// autogenerated version info string. MUST GO BEFORE coreconstants.h INCLUDE
#include "../../../../build/ground/openpilotgcs/gcsversioninfo.h"

#include <coreplugin/coreconstants.h>

LogFile::LogFile(QObject *parent) :
    QIODevice(parent),
    timestampBufferIdx(0)
{
    connect(&timer, SIGNAL(timeout()), this, SLOT(timerFired()));
}

/**
 * Opens the logfile QIODevice and the underlying logfile. In case
 * we want to save the logfile, we open in WriteOnly. In case we
 * want to read the logfile, we open in ReadOnly.
 */
bool LogFile::open(OpenMode mode) {

    // start a timer for playback
    myTime.restart();
    if (file.isOpen()) {
        // We end up here when doing a replay, because the connection
        // manager will also try to open the QIODevice, even though we just
        // opened it after selecting the file, which happens before the
        // connection manager call...
        return true;
    }

    //Open file as either WriteOnly, or ReadOnly, depending on `mode` parameter
    if(file.open(mode) == FALSE)
    {
        qDebug() << "Unable to open " << file.fileName() << " for logging";
        return false;
    }

    // TODO: Write a header at the beginng describing objects so that in future
    // they can be read back if ID's change

    /*This addresses part of the TODO. It writes the git hash to the beginning of the file. This will
     * not protect against data losses due to UAVO that have changed when there is no commit to public
     * git, or to commits that are based off of branches that have since been pruned. As such, this
     * can only be seen as a temporary fix.
     */
    if(mode==QIODevice::WriteOnly)
    {
        QString gcsRevision = QString::fromLatin1(Core::Constants::GCS_REVISION_STR);
        QTextStream out(&file);
        out << "OpenPilot git hash:\n" <<  gcsRevision << "\n";
    }
    else if(mode == QIODevice::ReadOnly)
    {
        file.readLine(); //Read first line of log file. This assumes that the logfile is of the new format.
        QString logHashString=file.readLine().trimmed(); //Read second line of log file. This assumes that the logfile is of the new format.
        qDebug() << "Log git hash: " << logHashString;
        QString gcsRevision = QString::fromLatin1(Core::Constants::GCS_REVISION_STR);
        qDebug() << "GCS git hash: " << gcsRevision;

        if(logHashString != gcsRevision){
            QMessageBox msgBox;
            msgBox.setText("Possible log file incompatibility.");
            msgBox.setInformativeText(QString("The log file was made with %1.").arg(logHashString));
            msgBox.exec();
        }
    }
    else
    {
        qDebug()<< "Logging read/write mode incorrectly set.";
    }

    // Must call parent function for QIODevice to pass calls to writeData
    // We always open ReadWrite, because otherwise we will get tons of warnings
    // during a logfile replay. Read nature is checked upon write ops below.
    QIODevice::open(QIODevice::ReadWrite);

    return true;
}

void LogFile::close()
{
    emit aboutToClose();

    if (timer.isActive())
        timer.stop();
    file.close();
    QIODevice::close();
}

qint64 LogFile::writeData(const char * data, qint64 dataSize) {
    if (!file.isWritable())
        return dataSize;

    quint32 timeStamp = myTime.elapsed();

    file.write((char *) &timeStamp,sizeof(timeStamp));
    file.write((char *) &dataSize, sizeof(dataSize));

    qint64 written = file.write(data, dataSize);
    if(written != -1)
        emit bytesWritten(written);

    return dataSize;
}

qint64 LogFile::readData(char * data, qint64 maxSize) {
    QMutexLocker locker(&mutex);
    qint64 toRead = qMin(maxSize,(qint64)dataBuffer.size());
    memcpy(data,dataBuffer.data(),toRead);
    dataBuffer.remove(0,toRead);
    return toRead;
}

qint64 LogFile::bytesAvailable() const
{
    return dataBuffer.size();
}

void LogFile::timerFired()
{
    qint64 dataSize;

    if(file.bytesAvailable() > 4)
    {

        int time;
        time = myTime.elapsed();

        //Read packets
        while ((lastPlayTime + ((time - lastPlayTimeOffset)* playbackSpeed) > lastTimeStamp))
        {
            lastPlayTime += ((time - lastPlayTimeOffset)* playbackSpeed);
            if(file.bytesAvailable() < 4) {
                stopReplay();
                return;
            }

            file.seek(lastTimeStampPos+sizeof(lastTimeStamp));

            file.read((char *) &dataSize, sizeof(dataSize));

            if (dataSize<1 || dataSize>(1024*1024)) {
                qDebug() << "Error: Logfile corrupted! Unlikely packet size: " << dataSize << "\n";
                stopReplay();
                return;
            }
            if(file.bytesAvailable() < dataSize) {
                stopReplay();
                return;
            }

            mutex.lock();
            dataBuffer.append(file.read(dataSize));
            mutex.unlock();
            emit readyRead();

            if(file.bytesAvailable() < 4) {
                stopReplay();
                return;
            }

            int save=lastTimeStamp;

            lastTimeStampPos=timestampPos[timestampBufferIdx];
            lastTimeStamp = timestampBuffer[timestampBufferIdx];
            timestampBufferIdx++;
            // some validity checks
            if (lastTimeStamp<save // logfile goies back in time
                    || (lastTimeStamp-save) > (60*60*1000)) { // gap of more than 60 minutes)
                qDebug() << "Error: Logfile corrupted! Unlikely timestamp " << lastTimeStamp << " after "<< save << "\n";
                stopReplay();
                return;
            }

            lastPlayTimeOffset = time;
            time = myTime.elapsed();

        }
    } else {
        stopReplay();
    }

}

bool LogFile::startReplay() {
    dataBuffer.clear();
    myTime.restart();
    lastPlayTimeOffset = 0;
    lastPlayTime = 0;
    playbackSpeed = 1;

    //Read all log timestamps into array
    timestampBuffer.clear(); //Save beginning of log for later use
    timestampPos.clear();
    quint64 logFileStartIdx=file.pos();
    timestampBufferIdx=0;

    while (!file.atEnd()){
        qint64 dataSize;
        timestampPos.append(file.pos());
        file.read((char *) &lastTimeStamp,sizeof(lastTimeStamp));
        file.read((char *) &dataSize, sizeof(dataSize));

        timestampBuffer.append(lastTimeStamp);

        file.seek(file.pos()+dataSize);
    }

    //Reset to log beginning. WHY DOES PLAYBACK FAIL IF I DON'T DO THIS?
    file.seek(logFileStartIdx+sizeof(lastTimeStamp));

    lastTimeStampPos=timestampPos[timestampBufferIdx];
    lastTimeStamp = timestampBuffer[timestampBufferIdx];
    timestampBufferIdx++;
    timer.setInterval(10);
    timer.start();
    emit replayStarted();
    return true;
}

bool LogFile::stopReplay() {
    close();
    emit replayFinished();
    return true;
}

void LogFile::pauseReplay()
{
    timer.stop();
}

void LogFile::resumeReplay()
{
    lastPlayTimeOffset = myTime.elapsed();
    timer.start();
}

/**
 * @brief LogFile::setReplayTime, sets the playback time
 * @param val, the time in
 */
void LogFile::setReplayTime(double val)
{
    quint32 tmpIdx=0;
    while(timestampBuffer[tmpIdx++] <= val*1000 && tmpIdx <= timestampBufferIdx){
    }

    lastTimeStampPos=timestampPos[tmpIdx];
    lastTimeStamp=timestampBuffer[tmpIdx];
    timestampBufferIdx=tmpIdx;

    lastPlayTimeOffset = myTime.elapsed();
    lastPlayTime=lastTimeStamp;

    qDebug() << "Replaying at: " << lastTimeStamp << ", but requestion at" << val*1000;
}

